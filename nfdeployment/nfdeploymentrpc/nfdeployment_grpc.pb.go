// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: nfdeployment.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NFDeploymentRPCClient is the client API for NFDeploymentRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFDeploymentRPCClient interface {
	CreateUpdate(ctx context.Context, in *NFDeployment, opts ...grpc.CallOption) (*NFDeploymentResponse, error)
	Delete(ctx context.Context, in *NFDeployment, opts ...grpc.CallOption) (*NFDeploymentResponse, error)
}

type nFDeploymentRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewNFDeploymentRPCClient(cc grpc.ClientConnInterface) NFDeploymentRPCClient {
	return &nFDeploymentRPCClient{cc}
}

func (c *nFDeploymentRPCClient) CreateUpdate(ctx context.Context, in *NFDeployment, opts ...grpc.CallOption) (*NFDeploymentResponse, error) {
	out := new(NFDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.NFDeploymentRPC/CreateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFDeploymentRPCClient) Delete(ctx context.Context, in *NFDeployment, opts ...grpc.CallOption) (*NFDeploymentResponse, error) {
	out := new(NFDeploymentResponse)
	err := c.cc.Invoke(ctx, "/proto.NFDeploymentRPC/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFDeploymentRPCServer is the server API for NFDeploymentRPC service.
// All implementations must embed UnimplementedNFDeploymentRPCServer
// for forward compatibility
type NFDeploymentRPCServer interface {
	CreateUpdate(context.Context, *NFDeployment) (*NFDeploymentResponse, error)
	Delete(context.Context, *NFDeployment) (*NFDeploymentResponse, error)
	mustEmbedUnimplementedNFDeploymentRPCServer()
}

// UnimplementedNFDeploymentRPCServer must be embedded to have forward compatible implementations.
type UnimplementedNFDeploymentRPCServer struct {
}

func (UnimplementedNFDeploymentRPCServer) CreateUpdate(context.Context, *NFDeployment) (*NFDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpdate not implemented")
}
func (UnimplementedNFDeploymentRPCServer) Delete(context.Context, *NFDeployment) (*NFDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNFDeploymentRPCServer) mustEmbedUnimplementedNFDeploymentRPCServer() {}

// UnsafeNFDeploymentRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFDeploymentRPCServer will
// result in compilation errors.
type UnsafeNFDeploymentRPCServer interface {
	mustEmbedUnimplementedNFDeploymentRPCServer()
}

func RegisterNFDeploymentRPCServer(s grpc.ServiceRegistrar, srv NFDeploymentRPCServer) {
	s.RegisterService(&NFDeploymentRPC_ServiceDesc, srv)
}

func _NFDeploymentRPC_CreateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFDeploymentRPCServer).CreateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NFDeploymentRPC/CreateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFDeploymentRPCServer).CreateUpdate(ctx, req.(*NFDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFDeploymentRPC_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFDeploymentRPCServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NFDeploymentRPC/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFDeploymentRPCServer).Delete(ctx, req.(*NFDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

// NFDeploymentRPC_ServiceDesc is the grpc.ServiceDesc for NFDeploymentRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFDeploymentRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NFDeploymentRPC",
	HandlerType: (*NFDeploymentRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpdate",
			Handler:    _NFDeploymentRPC_CreateUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NFDeploymentRPC_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfdeployment.proto",
}
